{"version":3,"file":"inline.js","sourceRoot":"","sources":["../src/inline.ts"],"names":[],"mappings":";;;;;;AAAA,+BAA8D;AAC9D,+BAA0E;AAC1E,iCAA4C;AAC5C,gFAAiD;AACjD,+BAAqC;AAMrC;;;;;;;GAOG;AACI,KAAK,UAAU,eAAe,CAAC,OAAgB;IACrD,MAAM,OAAO,CAAC,GAAG,CAAC;QACjB,GAAG,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,eAAe,CAAC;QAC7C,CAAC,KAAK,IAAI,EAAE;YACX,IAAI,uBAAiB,CAAC,OAAO,CAAC,EAAE;gBAC/B,MAAM,IAAI,GAAG,MAAM,kBAAW,CAAC,KAAK,EAAE,oBAAoB,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,GAAG,EAAE,CACtF,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CACnC,CAAA;gBACD,IAAI,IAAI,CAAC,IAAI,KAAK,eAAe,EAAE;oBAClC,yDAAyD;oBACzD,qDAAqD;oBAErD,aAAM,CAAC,OAAO,CAAC,aAAa,EAAE,gDAAgD,CAAC,CAAA;oBAE/E,oCAAoC;oBACpC,MAAM,mBAAmB,GAAG,IAAI,SAAS,EAAE,CAAC,eAAe,CAC1D,MAAM,IAAI,CAAC,IAAI,EAAE,EACjB,eAAe,CACA,CAAA;oBAChB,MAAM,OAAO,GAAI,mBAAmB,CAAC,eAA4C,CAAA;oBACjF,OAAO,CAAC,YAAY,CAAC,GAAG,EAAE,OAAO,CAAC,YAAY,CAAC,GAAG,CAAE,CAAC,CAAA;oBACrD,OAAO,CAAC,YAAY,CAAC,GAAG,EAAE,OAAO,CAAC,YAAY,CAAC,GAAG,CAAE,CAAC,CAAA;oBACrD,OAAO,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,YAAY,CAAC,OAAO,CAAE,CAAC,CAAA;oBAC7D,OAAO,CAAC,YAAY,CAAC,QAAQ,EAAE,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAE,CAAC,CAAA;oBAC/D,OAAO,CAAC,MAAM,EAAE,CAAA;oBAChB,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;oBAC5B,IAAI;wBACH,uDAAuD;wBACvD,MAAM,WAAW,GAAG,OAAO,CAAC,aAAa,CAAA;wBACzC,MAAM,KAAK,GAAG,WAAW,CAAC,eAAe,CAAC,kBAAY,EAAE,GAAG,CAAC,CAAA;wBAC5D,aAAM,CAAC,OAAO,CAAC,EAAE,EAAE,8BAA8B,CAAC,CAAA;wBAClD,mBAAa,CAAC,OAAO,EAAE;4BACtB,gBAAgB,EAAE,KAAK;4BACvB,WAAW;4BACX,QAAQ,EAAE,GAAG,OAAO,CAAC,EAAE,GAAG;4BAC1B,OAAO,EAAE;gCACR,qDAAqD;gCACrD,SAAS,EAAE,KAAK;gCAChB,WAAW,EAAE,OAAO,CAAC,OAAO,CAAC,OAAO;6BACpC;yBACD,CAAC,CAAA;wBAEF,yCAAyC;wBACzC,KAAK,CAAC,OAAO,CAAC,GAAG,GAAG,KAAK,CAAA;wBACzB,KAAK,CAAC,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAA;wBACjC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA;qBAC1B;4BAAS;wBACT,OAAO,CAAC,MAAM,EAAE,CAAA;qBAChB;iBACD;qBAAM;oBACN,2CAA2C;oBAC3C,MAAM,OAAO,GAAG,MAAM,aAAa,CAAC,IAAI,CAAC,CAAA;oBACzC,OAAO,CAAC,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAA;oBAC1C,OAAO,CAAC,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,CAAC,CAAA;iBAC1C;aACD;iBAAM,IAAI,uBAAiB,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,KAAK,EAAE;gBACvD,IAAI;oBACH,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAA;oBACpC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;wBACzB,IAAI,uBAAiB,CAAC,IAAI,CAAC,EAAE;4BAC5B,MAAM,iBAAiB,GAAG,8BAAc,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;4BACxD,MAAM,QAAQ,GAAoB,EAAE,CAAA;4BACpC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gCAC7B,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;oCACtE,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;oCACrC,IAAI,eAAe,CAAC,IAAI,KAAK,QAAQ,IAAI,eAAe,CAAC,IAAI,KAAK,MAAM,EAAE;wCACzE,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,yBAAmB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAA;wCAC/D,QAAQ,CAAC,IAAI,CACZ,CAAC,KAAK,IAAI,EAAE;4CACX,IAAI;gDACH,MAAM,IAAI,GAAG,MAAM,kBAAW,CAC7B,KAAK,EACL,oBAAoB,GAAG,CAAC,IAAI,EAAE,EAC9B,GAAG,EAAE,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAC7B,CAAA;gDACD,IACC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;oDAC9B,IAAI,CAAC,IAAI,KAAK,uBAAuB,EACpC;oDACD,MAAM,IAAI,KAAK,CACd,0CAA0C,GAAG,CAAC,IAAI,mCAAmC,IAAI,CAAC,IAAI,EAAE,CAChG,CAAA;iDACD;gDACD,MAAM,OAAO,GAAG,MAAM,aAAa,CAAC,IAAI,CAAC,CAAA;gDACzC,eAAe,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAA;6CACpC;4CAAC,OAAO,KAAK,EAAE;gDACf,OAAO,CAAC,KAAK,CAAC,kBAAkB,GAAG,CAAC,IAAI,EAAE,EAAE,KAAK,CAAC,CAAA;6CAClD;wCACF,CAAC,CAAC,EAAE,CACJ,CAAA;qCACD;iCACD;4BACF,CAAC,CAAC,CAAA;4BACF,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;4BAC3B,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,8BAAc,CAAC,SAAS,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAA;yBAClE;qBACD;iBACD;gBAAC,OAAO,KAAK,EAAE;oBACf,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;iBAChE;aACD;QACF,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YAClB,OAAO,CAAC,KAAK,CAAC,qCAAqC,EAAE,OAAO,EAAE,KAAK,CAAC,CAAA;QACrE,CAAC,CAAC;KACF,CAAC,CAAA;AACH,CAAC;AAzGD,0CAyGC;AAED,KAAK,UAAU,aAAa,CAAC,GAAW;IACvC,aAAM,CAAC,GAAG,EAAE,eAAe,CAAC,CAAA;IAC5B,MAAM,OAAO,GAAG,IAAI,OAAO,EAAE,CAAA;IAC7B,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,CAAC,CAAA;IAC9C,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;QACjB,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAA;KACpC;IACD,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;IAClC,OAAO,IAAI,CAAA;AACZ,CAAC;AAED,KAAK,UAAU,aAAa,CAAC,IAAU;IACtC,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAA;IAC/B,MAAM,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC3C,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC,CAAC,CAAA;QACnG,MAAM,CAAC,gBAAgB,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,CAAA;QAChD,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAA;IAC3B,CAAC,CAAC,CAAA;IACF,OAAO,IAAI,GAAG,CAAC,MAAM,CAAC,MAAgB,CAAC,CAAA;AACxC,CAAC","sourcesContent":["import { isCSSFontFaceRule, unescapeStringValue } from './css'\nimport { isSVGImageElement, isSVGStyleElement, svgNamespace } from './dom'\nimport { withTimeout, assert } from './util'\nimport cssValueParser from 'postcss-value-parser'\nimport { handleSvgNode } from './svg'\n\ndeclare global {\n\tinterface SVGStyleElement extends LinkStyle {}\n}\n\n/**\n * Inlines all external resources of the given element, such as fonts and images.\n *\n * Fonts and binary images are inlined as Base64 data: URIs.\n *\n * Images that reference another SVG are inlined by inlining the embedded SVG into the output SVG.\n * Note: The passed element needs to be attached to a document with a window (`defaultView`) for this so that `getComputedStyle()` can be used.\n */\nexport async function inlineResources(element: Element): Promise<void> {\n\tawait Promise.all([\n\t\t...[...element.children].map(inlineResources),\n\t\t(async () => {\n\t\t\tif (isSVGImageElement(element)) {\n\t\t\t\tconst blob = await withTimeout(10000, `Timeout fetching ${element.href.baseVal}`, () =>\n\t\t\t\t\tfetchResource(element.href.baseVal)\n\t\t\t\t)\n\t\t\t\tif (blob.type === 'image/svg+xml') {\n\t\t\t\t\t// If the image is an SVG, inline it into the output SVG.\n\t\t\t\t\t// Some tools (e.g. Figma) do not support nested SVG.\n\n\t\t\t\t\tassert(element.ownerDocument, 'Expected <image> element to have ownerDocument')\n\n\t\t\t\t\t// Replace <image> with inline <svg>\n\t\t\t\t\tconst embeddedSvgDocument = new DOMParser().parseFromString(\n\t\t\t\t\t\tawait blob.text(),\n\t\t\t\t\t\t'image/svg+xml'\n\t\t\t\t\t) as XMLDocument\n\t\t\t\t\tconst svgRoot = (embeddedSvgDocument.documentElement as Element) as SVGSVGElement\n\t\t\t\t\tsvgRoot.setAttribute('x', element.getAttribute('x')!)\n\t\t\t\t\tsvgRoot.setAttribute('y', element.getAttribute('y')!)\n\t\t\t\t\tsvgRoot.setAttribute('width', element.getAttribute('width')!)\n\t\t\t\t\tsvgRoot.setAttribute('height', element.getAttribute('height')!)\n\t\t\t\t\tsvgRoot.remove()\n\t\t\t\t\telement.replaceWith(svgRoot)\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// Let handleSvgNode inline the <svg> into a simple <g>\n\t\t\t\t\t\tconst svgDocument = element.ownerDocument\n\t\t\t\t\t\tconst mount = svgDocument.createElementNS(svgNamespace, 'g')\n\t\t\t\t\t\tassert(element.id, '<image> element must have ID')\n\t\t\t\t\t\thandleSvgNode(svgRoot, {\n\t\t\t\t\t\t\tcurrentSvgParent: mount,\n\t\t\t\t\t\t\tsvgDocument,\n\t\t\t\t\t\t\tidPrefix: `${element.id}-`,\n\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t// SVGs embedded through <img> are never interactive.\n\t\t\t\t\t\t\t\tkeepLinks: false,\n\t\t\t\t\t\t\t\tcaptureArea: svgRoot.viewBox.baseVal,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\t// Replace the <svg> element with the <g>\n\t\t\t\t\t\tmount.dataset.tag = 'img'\n\t\t\t\t\t\tmount.setAttribute('role', 'img')\n\t\t\t\t\t\tsvgRoot.replaceWith(mount)\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tsvgRoot.remove()\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Inline binary images as base64 data: URL\n\t\t\t\t\tconst dataUrl = await blobToDataURL(blob)\n\t\t\t\t\telement.dataset.src = element.href.baseVal\n\t\t\t\t\telement.setAttribute('href', dataUrl.href)\n\t\t\t\t}\n\t\t\t} else if (isSVGStyleElement(element) && element.sheet) {\n\t\t\t\ttry {\n\t\t\t\t\tconst rules = element.sheet.cssRules\n\t\t\t\t\tfor (const rule of rules) {\n\t\t\t\t\t\tif (isCSSFontFaceRule(rule)) {\n\t\t\t\t\t\t\tconst parsedSourceValue = cssValueParser(rule.style.src)\n\t\t\t\t\t\t\tconst promises: Promise<void>[] = []\n\t\t\t\t\t\t\tparsedSourceValue.walk(node => {\n\t\t\t\t\t\t\t\tif (node.type === 'function' && node.value === 'url' && node.nodes[0]) {\n\t\t\t\t\t\t\t\t\tconst urlArgumentNode = node.nodes[0]\n\t\t\t\t\t\t\t\t\tif (urlArgumentNode.type === 'string' || urlArgumentNode.type === 'word') {\n\t\t\t\t\t\t\t\t\t\tconst url = new URL(unescapeStringValue(urlArgumentNode.value))\n\t\t\t\t\t\t\t\t\t\tpromises.push(\n\t\t\t\t\t\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst blob = await withTimeout(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t10000,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t`Timeout fetching ${url.href}`,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t() => fetchResource(url.href)\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t!blob.type.startsWith('font/') &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tblob.type !== 'application/font-woff'\n\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`Invalid response type inlining font at ${url.href}: Expected font/* response, got ${blob.type}`\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst dataUrl = await blobToDataURL(blob)\n\t\t\t\t\t\t\t\t\t\t\t\t\turlArgumentNode.value = dataUrl.href\n\t\t\t\t\t\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.error(`Error inlining ${url.href}`, error)\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t})()\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tawait Promise.all(promises)\n\t\t\t\t\t\t\trule.style.src = cssValueParser.stringify(parsedSourceValue.nodes)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error inlining stylesheet', element.sheet, error)\n\t\t\t\t}\n\t\t\t}\n\t\t})().catch(error => {\n\t\t\tconsole.error('Error inlining resource for element', element, error)\n\t\t}),\n\t])\n}\n\nasync function fetchResource(url: string): Promise<Blob> {\n\tassert(url, 'No URL passed')\n\tconst headers = new Headers()\n\tconst response = await fetch(url, { headers })\n\tif (!response.ok) {\n\t\tthrow new Error(response.statusText)\n\t}\n\tconst blob = await response.blob()\n\treturn blob\n}\n\nasync function blobToDataURL(blob: Blob): Promise<URL> {\n\tconst reader = new FileReader()\n\tawait new Promise<void>((resolve, reject) => {\n\t\treader.addEventListener('error', () => reject(new Error('Error loading resource with FileLoader')))\n\t\treader.addEventListener('load', () => resolve())\n\t\treader.readAsDataURL(blob)\n\t})\n\treturn new URL(reader.result as string)\n}\n"]}